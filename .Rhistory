rnorm(10)
hist(rnorm(1000))
library("datasets", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("stats", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
swirl()
library("swirl", lib.loc="~/R/win-library/3.3")
swirl()
5+7
*<-5+7
x<-5+7
*
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
bye()
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
?iris
library("datasets", lib.loc="C:/Program Files/R/R-3.3.0/library")
data(iris)
?iris
iris
View(iris)
s<-split(iris,iris$Species)
lapply(s,function(x),colMeans(x[,c(Sepal.Length)]))
lapply(s,function(x)colMeans(x[,c(Sepal.Length)]))
lapply(s,function(x)colMeans(x[,c("Sepal.Length")]))
lapply(s,function(x)colMeans(x[,c("Sepal.Length","Sepal.Width")]))
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
View(mtcars)
a<-split(mtcars,mtcars$cyl)
lapply(a,function(x)colMeans(x[,c("cyl","hp")]))
lapply(a,function(x)colMeans(x[,c("mpg","hp")]))
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
debug(ls)
ls()
library("Matrix", lib.loc="C:/Program Files/R/R-3.3.0/library")
A<- matrix(c(1,2,3,4),nrow=2,ncol=2)
A
B<-solve(A)
B
set.seed(1)
rpois(5, 2)
set.seed(10
)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(httr)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
close(con)
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
data<-read.fwf(file="http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
data<-read.fwf(file="http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
data<-read.fwf(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data<-read.fwf(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",skip=4,widths=4)
View(data)
data<-read.fwf(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",skip=3,header=TRUE,widths=4)
View(data)
data<-read.fwf(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",skip=4,widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
View(data)
sum(data[,4])
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "b8f56bcc7adebf1c6626",
secret = "af6f55c1f80d792ef2cb3c429163b8aa873931dc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
gtoken
install.packages("httpuv")
oauth_endpoints("github")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below -> replaced
myapp <- oauth_app("github",
key = "b8f56bcc7adebf1c6626",
secret = "af6f55c1f80d792ef2cb3c429163b8aa873931dc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
#gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos","1d7cdedeca090359b2e3c02ea7969e7686b8dca8" )
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos",config(token="1d7cdedeca090359b2e3c02ea7969e7686b8dca8" ))
stop_for_status(req)
content(req)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("shiny")
library(shiny)
runExample("02_text")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
library(shiny)
library(dplyr)
library(ggplot2)
setwd("C:/Users/Monika/Documents/DS_Specialization_Coursera/Reproducible Research/Wk2/repdata%2Fdata%2Factivity")
dataset0 <- read.csv("activity.csv",header=TRUE, stringsAsFactors = FALSE)
str(dataset0)
#####
# 1.#
#####
by_date <- group_by(dataset0,date)
daily_steps_total <- summarise(by_date,
steps_ttl = sum(steps, na.rm=TRUE))
ttl_steps_hist <- hist(daily_steps_total$steps_ttl, xlab="total number of steps taken per day", ylab="number of days", main="histogram of the total number of steps taken per day")
ttl_steps_hist
str(daily_steps_total)
steps_mean <- round(mean(daily_steps_total$steps_ttl, na.rm=TRUE),digits=2)
steps_median <- median(daily_steps_total$steps_ttl, na.rm=TRUE)
#####
# 2.#
#####
by_interval <- group_by(dataset0,interval)
interval_steps_avg <- summarise(by_interval,
steps_avg = mean(steps, na.rm=TRUE))
interval_time_series <- plot(interval_steps_avg$steps_avg ~ interval_steps_avg$interval, type="l", xlab="interval", ylab="average number of steps taken", main="average number of steps averaged across all days")
#####
# 3.#
#####
all_rows <- nrow(dataset0)
NA_rows <- nrow(na.omit(dataset0))
dataset1 <- merge(dataset0,interval_steps_avg,by="interval")
dataset1$steps2 <- ifelse(is.na(dataset1$steps), dataset1$steps_avg,  dataset1$steps)
dataset1 <- dataset1[order(dataset1$date,dataset1$interval),]
dataset1 <- dataset1[,c(5,3,1)]
names(dataset1)[1] <- "steps"
#####
# 4.#
#####
by_date1 <- group_by(dataset1,date)
daily_steps_total_1 <- summarise(by_date1,
steps_ttl = sum(steps, na.rm=TRUE))
ttl_steps_hist1 <- hist(daily_steps_total_1$steps_ttl, xlab="total number of steps taken per day", ylab="number of days", main="histogram of the total number of steps taken per day")
ttl_steps_hist1
str(daily_steps_total_1)
steps_mean1 <- round(mean(daily_steps_total_1$steps_ttl, na.rm=TRUE),digits=2)
steps_median1 <- median(daily_steps_total_1$steps_ttl, na.rm=TRUE)
dataset0$date <- as.Date(dataset0$date)
weekdays_list <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
dataset0$day_of_week <- factor((weekdays(dataset0$date) %in% weekdays_list),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday') )
by_interval_wkd <- group_by(dataset0,day_of_week,interval)
interval_steps_avg_wkd <- summarise(by_interval_wkd,
steps_avg = mean(steps, na.rm=TRUE))
View(interval_steps_avg_wkd)
time_series_2 <- ggplot(dataset0, aes(interval,steps_avg)) + geom_line() + facet_grid(day_of_week ~.)
time_series_2
time_series_2 <- ggplot(interval_steps_avg_wkd, aes(interval,steps_avg)) + geom_line() + facet_grid(day_of_week ~.)
time_series_2
time_series_2 <- ggplot(interval_steps_avg_wkd, aes(interval,steps_avg)) + geom_line() + facet_grid(day_of_week ~.) + labs(y="average number of steps")
time_series_2
